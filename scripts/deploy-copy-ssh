export RED='\033[0;31m'
export GREEN='\033[0;32m'
export NC='\033[0m' # No Color
export REDBOLD="${RED}$(tput bold)"
export GREENBOLD="${GREEN}$(tput bold)"
export NCNORMAL="${NC}$(tput sgr0)"

# Check if everything is commited localy
# if ! git diff-index --quiet HEAD --; then
#     echo -e "${REDBOLD}Uncommitted changes! Please commit the changes first.${NC}";
#     exit 1;
# fi

# Check if correct branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [[ "$CURRENT_BRANCH" != "$BRANCH" ]]; then
  echo -e "${REDBOLD}Wrong branch for deployment: '$CURRENT_BRANCH'. Should be '$BRANCH'.${NC}";
  exit 1;
fi
CURRENT_BRANCH=$(git -C $MCC_LOCAL_FOLDER rev-parse --abbrev-ref HEAD)
if [[ "$CURRENT_BRANCH" != "$MCC_BRANCH" ]]; then
  echo -e "${REDBOLD}Wrong branch for deployment: '$CURRENT_BRANCH'. Should be '$MCC_BRANCH'.${NC}";
  exit 1;
fi

# Test if build works locally
yarn build || { echo 'Local build failed. Check errors and fix the code.' ; exit 1; }

# Archive current branch to $FNAME
echo "Archive started ..."
mkdir -p tmp_data
git archive $BRANCH | gzip > tmp_data/$FNAME || { echo 'Archive failed' ; exit 1; }

# Copy $FNAME to server
echo -e "${GREENBOLD}Archiving done.${NC} Copying to server ..."
scp tmp_data/$FNAME $USER@$SERVER:~ || { echo 'sco failed' ; exit 1; }


# Copy MCC
echo -e "${GREENBOLD}Copying MCC ...${NC}"
cd $MCC_LOCAL_FOLDER
mkdir -p tmp_data
git archive $MCC_BRANCH | gzip > tmp_data/$MCC_FNAME || { echo 'Archive failed' ; exit 1; }
scp tmp_data/$MCC_FNAME $USER@$SERVER:~ || { echo 'sco failed' ; exit 1; }
cd $CURRENT_DIR


# Crete install folder if they do not exist
ssh -n $USER@$SERVER "mkdir -p $WORKDIR; mkdir -p $CONFIGDIR; mkdir -p $BACKUPDIR;"
ssh -n $USER@$SERVER "mkdir -p $MCC_WORKDIR"

# Do the following:
# - Clean $WORKDIR. 
# - Extract the archived app from $FNAME into $WORKDIR (app is run from here)
# - backup $FNAME with timestamp in name in $BACKUPDIR
# - override .env and docker-compose.yaml files from $CONFIGDIR. These files contain credential and must be set up on server.
echo -e "${GREENBOLD}Copying to server done.${NC} Installing ..."
ssh -n $USER@$SERVER "rm -rf $WORKDIR/*; mv $FNAME $WORKDIR; cd $WORKDIR; tar xzf $FNAME; mv $FNAME ../../$BACKUPDIR/deploy-$DEPLOY_NAME-$(date +\"%Y-%m-%d--%H-%M-%S\").tgz" || { echo 'Remote deployment failed' ; exit 1; }

ssh -n $USER@$SERVER "rm -rf $MCC_WORKDIR/*; mv $MCC_FNAME $MCC_WORKDIR; cd $MCC_WORKDIR; tar xzf $MCC_FNAME; mv $MCC_FNAME ../../$BACKUPDIR/mcc-deploy-$DEPLOY_NAME-$(date +\"%Y-%m-%d--%H-%M-%S\").tgz" || { echo 'Remote deployment failed' ; exit 1; }

echo -e "${GREENBOLD}Initializing configuration${NC} Copying ..."
ssh -n $USER@$SERVER "cp -a $CONFIGDIR/. $WORKDIR/configs/prod/;" || { echo 'Remote deployment failed' ; exit 1; }

# Build the MCC.
echo -e "${GREENBOLD}Installing MCC.${NC} Running yarn ..."
ssh -n $USER@$SERVER "source .profile; cd $MCC_WORKDIR; yarn; yarn build;" || { echo 'yarn install failed' ; exit 1; }

# Run yarn in $WORKDIR 
echo -e "${GREENBOLD}Installing done.${NC} Running yarn ..."
ssh -n $USER@$SERVER "source .profile; cd $WORKDIR; source scripts/replace-mcc-link.sh; yarn" || { echo 'yarn install failed' ; exit 1; }

# Build the app.
echo -e "${GREENBOLD}Yarn C${NC}"
ssh -n $USER@$SERVER "source .profile; cd $WORKDIR; yarn c" || { echo 'Building app failed' ; exit 1; }

echo -e "${GREENBOLD}Yarn install done.${NC} Building app ... "
ssh -n $USER@$SERVER "source .profile; cd $WORKDIR; yarn build" || { echo 'Building app failed' ; exit 1; }