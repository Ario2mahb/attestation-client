USER=ubuntu
#SERVER=34.89.169.205
SERVER=34.89.247.51
CURRENT_DIR=$(pwd)
WORKDIR="attester-client"
MCC_WORKDIR="mcc"
MCC_FOLDER="../mcc"
FNAME=latest-attester-client.tgz
MCC_FNAME=mcc.tgz
BACKUPDIR="attester-client-backups"
CONFIGDIR="attester-client-config"
BRANCH=main
exportMCC_BRANCH=master

SERVICE0=attester-spammer
SERVICE1=attester-client
SERVICE2=indexer-xrp
SERVICE3=indexer-btc
SERVICE4=indexer-ltc
SERVICE5=indexer-algo
SERVICE6=indexer-doge
SERVICE7=attester-backend

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color
REDBOLD="${RED}$(tput bold)"
GREENBOLD="${GREEN}$(tput bold)"
NCNORMAL="${NC}$(tput sgr0)"

# Check if everything is commited localy
# if ! git diff-index --quiet HEAD --; then
#     echo -e "${REDBOLD}Uncommitted changes! Please commit the changes first.${NC}";
#     exit 1;
# fi

# Check if correct branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [[ "$CURRENT_BRANCH" != "$BRANCH" ]]; then
  echo -e "${REDBOLD}Wrong branch for deployment: '$CURRENT_BRANCH'. Should be '$BRANCH'.${NC}";
  exit 1;
fi
CURRENT_BRANCH=$(git -C $MCC_FOLDER rev-parse --abbrev-ref HEAD)
if [[ "$CURRENT_BRANCH" != "$MCC_BRANCH" ]]; then
  echo -e "${REDBOLD}Wrong branch for deployment: '$CURRENT_BRANCH'. Should be '$MCC_BRANCH'.${NC}";
  exit 1;
fi

# Test if build works locally
yarn build || { echo 'Local build failed. Check errors and fix the code.' ; exit 1; }

# Archive current branch to $FNAME
echo "Archive started ..."
mkdir -p tmp_data
git archive $BRANCH | gzip > tmp_data/$FNAME || { echo 'Archive failed' ; exit 1; }

# Copy $FNAME to server
echo -e "${GREENBOLD}Archiving done.${NC} Copying to server ..."
scp tmp_data/$FNAME $USER@$SERVER:~ || { echo 'sco failed' ; exit 1; }


# Copy MCC
echo -e "${GREENBOLD}Copying MCC ...${NC}"
cd $MCC_FOLDER
mkdir -p tmp_data
git archive $MCC_BRANCH | gzip > tmp_data/$MCC_FNAME || { echo 'Archive failed' ; exit 1; }
scp tmp_data/$MCC_FNAME $USER@$SERVER:~ || { echo 'sco failed' ; exit 1; }
cd $CURRENT_DIR


# Crete install folder if they do not exist
ssh -n $USER@$SERVER "mkdir -p $WORKDIR; mkdir -p $WORKDIR-config; mkdir -p $WORKDIR-backups;"
ssh -n $USER@$SERVER "mkdir -p $MCC_WORKDIR"

# Do the following:
# - Clean $WORKDIR. 
# - Extract the archived app from $FNAME into $WORKDIR (app is run from here)
# - backup $FNAME with timestamp in name in $BACKUPDIR
# - override .env and docker-compose.yaml files from $CONFIGDIR. These files contain credential and must be set up on server.
echo -e "${GREENBOLD}Copying to server done.${NC} Installing ..."
ssh -n $USER@$SERVER "rm -rf $WORKDIR/*; mv $FNAME $WORKDIR; cd $WORKDIR; tar xzf $FNAME; mv $FNAME ../$BACKUPDIR/deploy--$(date +\"%Y-%m-%d--%H-%M-%S\").tgz" || { echo 'Remote deployment failed' ; exit 1; }

ssh -n $USER@$SERVER "rm -rf $MCC_WORKDIR/*; mv $MCC_FNAME $MCC_WORKDIR; cd $MCC_WORKDIR; tar xzf $MCC_FNAME; mv $MCC_FNAME ../$BACKUPDIR/mcc-deploy--$(date +\"%Y-%m-%d--%H-%M-%S\").tgz" || { echo 'Remote deployment failed' ; exit 1; }

echo -e "${GREENBOLD}Initializing configuration${NC} Copying ..."
ssh -n $USER@$SERVER "cp -a $CONFIGDIR/. $WORKDIR/configs/prod/;" || { echo 'Remote deployment failed' ; exit 1; }

# Build the MCC.
echo -e "${GREENBOLD}Installing MCC.${NC} Running yarn ..."
ssh -n $USER@$SERVER "source .profile; cd $MCC_WORKDIR; yarn; yarn build; yarn link" || { echo 'yarn install failed' ; exit 1; }

# Run yarn in $WORKDIR 
echo -e "${GREENBOLD}Installing done.${NC} Running yarn ..."
ssh -n $USER@$SERVER "source .profile; cd $WORKDIR; yarn link flare-mcc; yarn" || { echo 'yarn install failed' ; exit 1; }

# Build the app.
echo -e "${GREENBOLD}Yarn C${NC}"
ssh -n $USER@$SERVER "source .profile; cd $WORKDIR; yarn c" || { echo 'Building app failed' ; exit 1; }

echo -e "${GREENBOLD}Yarn install done.${NC} Building app ... "
ssh -n $USER@$SERVER "source .profile; cd $WORKDIR; yarn build" || { echo 'Building app failed' ; exit 1; }

# Restart the app as a service.
echo -e "${GREENBOLD}Build successful.${NC} Restarting app"
ssh -n $USER@$SERVER "systemctl --user restart $SERVICE0" || { echo "Restarting $SERVICE0 failed" ; exit 1; }
ssh -n $USER@$SERVER "systemctl --user restart $SERVICE1" || { echo "Restarting $SERVICE1 failed" ; exit 1; }
ssh -n $USER@$SERVER "systemctl --user restart $SERVICE2" || { echo "Restarting $SERVICE2 failed" ; exit 1; }
ssh -n $USER@$SERVER "systemctl --user restart $SERVICE3" || { echo "Restarting $SERVICE3 failed" ; exit 1; }
ssh -n $USER@$SERVER "systemctl --user restart $SERVICE4" || { echo "Restarting $SERVICE4 failed" ; exit 1; }
ssh -n $USER@$SERVER "systemctl --user restart $SERVICE5" || { echo "Restarting $SERVICE5 failed" ; exit 1; }
ssh -n $USER@$SERVER "systemctl --user restart $SERVICE6" || { echo "Restarting $SERVICE6 failed" ; exit 1; }
ssh -n $USER@$SERVER "systemctl --user restart $SERVICE7" || { echo "Restarting $SERVICE7 failed" ; exit 1; }
echo -e "${GREENBOLD}Done.${NC}"
